import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../models/playlist.dart';
import '../models/recognition_history.dart';
import '../providers/playlist_provider.dart';

class PlaylistDetailsScreen extends StatelessWidget {
  final Playlist playlist;
  
  const PlaylistDetailsScreen({Key? key, required this.playlist}) : super(key: key);
  
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: Text(playlist.name, style: TextStyle(fontWeight: FontWeight.bold)),
        backgroundColor: Colors.white,
        foregroundColor: Colors.black,
        elevation: 0,
        actions: [
          // Refresh button for all playlist types
          IconButton(
            icon: Icon(Icons.refresh),
            onPressed: () {
              final provider = Provider.of<PlaylistProvider>(context, listen: false);
              provider.loadAllPlaylists();
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(content: Text('Refreshing playlists')),
              );
            },
          ),
          if (playlist.type == PlaylistType.custom)
            IconButton(
              icon: Icon(Icons.delete_outline),
              onPressed: () => _confirmDeletePlaylist(context),
            ),
        ],
      ),
      body: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Playlist header
          Container(
            padding: EdgeInsets.all(16),
            child: Row(
              children: [
                Container(
                  width: 80,
                  height: 80,
                  decoration: BoxDecoration(
                    color: playlist.color.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Icon(playlist.icon, color: playlist.color, size: 40),
                ),
                SizedBox(width: 16),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        playlist.name,
                        style: TextStyle(
                          fontSize: 24,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                      Text(
                        playlist.description,
                        style: TextStyle(
                          color: Colors.grey[600],
                          fontSize: 14,
                        ),
                      ),
                      SizedBox(height: 8),
                      Consumer<PlaylistProvider>(
                        builder: (context, provider, child) {
                          // Get updated song count from the provider
                          int songCount = playlist.songs.length;
                          
                          if (playlist.type == PlaylistType.auto) {
                            songCount = provider.autoGeneratedPlaylist.songs.length;
                          } else if (playlist.type == PlaylistType.favorites) {
                            songCount = provider.favoritesPlaylist.songs.length;
                          } else if (playlist.type == PlaylistType.recent) {
                            songCount = provider.recentlyRecognizedPlaylist.songs.length;
                          }
                          
                          return Text(
                            '$songCount songs',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.grey[700],
                              fontWeight: FontWeight.w500,
                            ),
                          );
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
          
          // Generate button for auto-generated playlist
          if (playlist.type == PlaylistType.auto) _buildGenerateButton(context),
          
          // Songs list
          Divider(height: 1),
          Expanded(
            child: Consumer<PlaylistProvider>(
              builder: (context, provider, child) {
                if (provider.isLoading) {
                  return Center(child: CircularProgressIndicator());
                }
                
                // Use the most up-to-date playlist from provider if it's a system playlist
                Playlist currentPlaylist = playlist;
                if (playlist.type == PlaylistType.auto) {
                  currentPlaylist = provider.autoGeneratedPlaylist;
                } else if (playlist.type == PlaylistType.favorites) {
                  currentPlaylist = provider.favoritesPlaylist;
                } else if (playlist.type == PlaylistType.recent) {
                  currentPlaylist = provider.recentlyRecognizedPlaylist;
                }
                
                return currentPlaylist.songs.isEmpty
                    ? _buildEmptyState()
                    : RefreshIndicator(
                        onRefresh: () => provider.loadAllPlaylists(),
                        child: ListView.builder(
                          physics: AlwaysScrollableScrollPhysics(),
                          itemCount: currentPlaylist.songs.length,
                          itemBuilder: (context, index) {
                            final song = currentPlaylist.songs[index];
                            return _buildSongItem(context, song, index);
                          },
                        ),
                      );
              },
            ),
          ),
        ],
      ),
    );
  }
  
  Widget _buildGenerateButton(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: ElevatedButton.icon(
        onPressed: () async {
          final provider = Provider.of<PlaylistProvider>(context, listen: false);
          await provider.generatePlaylistFromHistory();
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(content: Text('Generated a new playlist based on your history')),
          );
        },
        icon: Icon(Icons.refresh),
        label: Text('Generate from History'),
        style: ElevatedButton.styleFrom(
          backgroundColor: Colors.purple,
          foregroundColor: Colors.white,
          padding: EdgeInsets.symmetric(vertical: 12),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(8),
          ),
        ),
      ),
    );
  }
  
  Widget _buildEmptyState() {
    return Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          Icon(
            Icons.queue_music,
            size: 64,
            color: Colors.grey[400],
          ),
          SizedBox(height: 16),
          Text(
            'No songs in this playlist yet',
            style: TextStyle(
              fontSize: 16,
              color: Colors.grey[600],
              fontWeight: FontWeight.w500,
            ),
          ),
          SizedBox(height: 8),
          Text(
            _getEmptyStateMessage(),
            style: TextStyle(
              fontSize: 14,
              color: Colors.grey[500],
            ),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }
  
  String _getEmptyStateMessage() {
    switch (playlist.type) {
      case PlaylistType.auto:
        return 'Listen to more songs to get recommendations';
      case PlaylistType.favorites:
        return 'Add songs to your favorites';
      case PlaylistType.recent:
        return 'Recognize songs to see them here';
      case PlaylistType.custom:
        return 'Add songs to this playlist';
      default:
        return '';
    }
  }
  
  Widget _buildSongItem(BuildContext context, RecognitionHistory song, int index) {
    return ListTile(
      contentPadding: EdgeInsets.symmetric(horizontal: 16, vertical: 8),
      leading: Container(
        width: 50,
        height: 50,
        decoration: BoxDecoration(
          color: Colors.grey[200],
          borderRadius: BorderRadius.circular(8),
        ),
        child: song.albumImage != null
            ? ClipRRect(
                borderRadius: BorderRadius.circular(8),
                child: Image.network(
                  song.albumImage!,
                  fit: BoxFit.cover,
                  errorBuilder: (context, error, stackTrace) =>
                      Icon(Icons.music_note, color: Colors.grey[500]),
                ),
              )
            : Icon(Icons.music_note, color: Colors.grey[500]),
      ),
      title: Text(
        song.songTitle,
        style: TextStyle(fontWeight: FontWeight.w600),
      ),
      subtitle: Text(song.artistName),
      trailing: _buildTrailingActions(context, song),
      onTap: () {
        // Navigate to song details screen when implemented
      },
    );
  }
  
  Widget _buildTrailingActions(BuildContext context, RecognitionHistory song) {
    return PopupMenuButton(
      icon: Icon(Icons.more_vert),
      itemBuilder: (context) => [
        if (playlist.type == PlaylistType.custom)
          PopupMenuItem(
            value: 'remove',
            child: Text('Remove from playlist'),
          ),
        PopupMenuItem(
          value: 'add',
          child: Text('Add to another playlist'),
        ),
      ],
      onSelected: (value) {
        if (value == 'remove') {
          _removeSongFromPlaylist(context, song);
        } else if (value == 'add') {
          _showAddToPlaylistDialog(context, song);
        }
      },
    );
  }
  
  void _removeSongFromPlaylist(BuildContext context, RecognitionHistory song) async {
    if (playlist.id == null) return;
    
    final provider = Provider.of<PlaylistProvider>(context, listen: false);
    final success = await provider.removeSongFromPlaylist(playlist.id!, song.songId);
    
    if (success) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Song removed from playlist')),
      );
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Failed to remove song from playlist')),
      );
    }
  }
  
  void _showAddToPlaylistDialog(BuildContext context, RecognitionHistory song) {
    final provider = Provider.of<PlaylistProvider>(context, listen: false);
    final userPlaylists = provider.userPlaylists;
    
    if (userPlaylists.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('You don\'t have any playlists yet')),
      );
      return;
    }
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Add to playlist'),
        content: SizedBox(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: userPlaylists.length,
            itemBuilder: (context, index) {
              final userPlaylist = userPlaylists[index];
              return ListTile(
                title: Text(userPlaylist.name),
                onTap: () async {
                  Navigator.pop(context);
                  if (userPlaylist.id != null) {
                    final success = await provider.addSongToPlaylist(userPlaylist.id!, song);
                    if (success) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(content: Text('Added to ${userPlaylist.name}')),
                      );
                    }
                  }
                },
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
        ],
      ),
    );
  }
  
  void _confirmDeletePlaylist(BuildContext context) {
    if (playlist.id == null) return;
    
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Delete playlist'),
        content: Text('Are you sure you want to delete "${playlist.name}"? This action cannot be undone.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: Text('Cancel'),
          ),
          TextButton(
            onPressed: () async {
              Navigator.pop(context);
              
              final provider = Provider.of<PlaylistProvider>(context, listen: false);
              final success = await provider.deletePlaylist(playlist.id!);
              
              if (success) {
                Navigator.pop(context); // Go back to playlists screen
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Playlist deleted')),
                );
              } else {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text('Failed to delete playlist')),
                );
              }
            },
            style: TextButton.styleFrom(foregroundColor: Colors.red),
            child: Text('Delete'),
          ),
        ],
      ),
    );
  }
} 