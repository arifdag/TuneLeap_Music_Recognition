import 'package:flutter/material.dart';
import '../models/playlist.dart';
import '../models/recognition_history.dart';
import '../services/playlist_service.dart';

class PlaylistProvider extends ChangeNotifier {
  final PlaylistService _playlistService = PlaylistService();
  
  List<Playlist> _userPlaylists = [];
  Playlist _autoGeneratedPlaylist = Playlist.autoGenerated();
  Playlist _favoritesPlaylist = Playlist.favorites();
  Playlist _recentlyRecognizedPlaylist = Playlist.recentlyRecognized();
  
  bool _isLoading = false;
  String _errorMessage = '';

  List<Playlist> get userPlaylists => _userPlaylists;
  Playlist get autoGeneratedPlaylist => _autoGeneratedPlaylist;
  Playlist get favoritesPlaylist => _favoritesPlaylist;
  Playlist get recentlyRecognizedPlaylist => _recentlyRecognizedPlaylist;
  bool get isLoading => _isLoading;
  String get errorMessage => _errorMessage;
  
  // Get all playlists (system and user-created)
  List<Playlist> get allPlaylists {
    return [
      _autoGeneratedPlaylist,
      _favoritesPlaylist,
      _recentlyRecognizedPlaylist,
      ..._userPlaylists,
    ];
  }
  

  Future<void> loadAllPlaylists() async {
    _isLoading = true;
    _errorMessage = '';
    notifyListeners();
    
    try {
      await Future.wait([
        _loadAutoGenerated(),
        _loadFavorites(),
        _loadRecentlyRecognized(),
        _loadUserPlaylists()
      ]);
    } catch (e) {
      _errorMessage = 'Failed to load playlists: ${e.toString()}';
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> _loadAutoGenerated() async {
    try {
      _autoGeneratedPlaylist = await _playlistService.getAutoGeneratedPlaylist();
    } catch (e) {
      print('Error loading auto-generated playlist: $e');
      // Keep the default in case of error
    }
  }

  Future<void> generatePlaylistFromHistory() async {
    _isLoading = true;
    notifyListeners();
    
    try {
      final generatedPlaylist = await _playlistService.generatePlaylistFromHistory();
      _autoGeneratedPlaylist = generatedPlaylist;
    } catch (e) {
      print('Error generating playlist: $e');
      // Keep the default in case of error
    } finally {
      _isLoading = false;
      notifyListeners();
    }
  }

  Future<void> _loadFavorites() async {
    try {
      _favoritesPlaylist = await _playlistService.getFavoritesPlaylist();
    } catch (e) {
      print('Error loading favorites playlist: $e');
      // Keep the default in case of error
    }
  }

  Future<void> _loadRecentlyRecognized() async {
    try {
      _recentlyRecognizedPlaylist = await _playlistService.getRecentlyRecognizedPlaylist();
    } catch (e) {
      print('Error loading recently recognized playlist: $e');
      // Keep the default in case of error
    }
  }
  
  // Load user-created playlists
  Future<void> _loadUserPlaylists() async {
    try {
      _userPlaylists = await _playlistService.getUserPlaylists();
    } catch (e) {
      print('Error loading user playlists: $e');
      _userPlaylists = [];
    }
  }
  
  // Create a new playlist
  Future<Playlist?> createPlaylist(String name, String description) async {
    _isLoading = true;
    notifyListeners();
    
    try {
      final newPlaylist = await _playlistService.createPlaylist(name, description);
      if (newPlaylist != null) {
        _userPlaylists.add(newPlaylist);
      }
      _isLoading = false;
      notifyListeners();
      return newPlaylist;
    } catch (e) {
      _errorMessage = 'Failed to create playlist: ${e.toString()}';
      _isLoading = false;
      notifyListeners();
      return null;
    }
  }
  
  // Delete a playlist
  Future<bool> deletePlaylist(int playlistId) async {
    _isLoading = true;
    notifyListeners();
    
    try {
      final success = await _playlistService.deletePlaylist(playlistId);
      if (success) {
        _userPlaylists.removeWhere((playlist) => playlist.id == playlistId);
      }
      _isLoading = false;
      notifyListeners();
      return success;
    } catch (e) {
      _errorMessage = 'Failed to delete playlist: ${e.toString()}';
      _isLoading = false;
      notifyListeners();
      return false;
    }
  }
  
  // Add song to playlist
  Future<bool> addSongToPlaylist(int playlistId, RecognitionHistory song) async {
    try {
      final success = await _playlistService.addSongToPlaylist(playlistId, song.songId);
      if (success) {
        // Get the updated playlist with the new song
        final updatedPlaylist = await _playlistService.getPlaylistById(playlistId);
        if (updatedPlaylist != null) {
          // Update the playlist in the list
          final index = _userPlaylists.indexWhere((p) => p.id == playlistId);
          if (index != -1) {
            _userPlaylists[index] = updatedPlaylist;
            notifyListeners();
          } else {
            // If playlist not found in the list, refresh the whole list
            await _loadUserPlaylists();
          }
        } else {
          // Fallback to just refreshing all playlists
          await _loadUserPlaylists();
        }
      }
      return success;
    } catch (e) {
      _errorMessage = 'Failed to add song to playlist: ${e.toString()}';
      return false;
    }
  }
  
  // Remove song from playlist
  Future<bool> removeSongFromPlaylist(int playlistId, int songId) async {
    try {
      final success = await _playlistService.removeSongFromPlaylist(playlistId, songId);
      if (success) {
        // Get the updated playlist with the song removed
        final updatedPlaylist = await _playlistService.getPlaylistById(playlistId);
        if (updatedPlaylist != null) {
          // Update the playlist in the list
          final index = _userPlaylists.indexWhere((p) => p.id == playlistId);
          if (index != -1) {
            _userPlaylists[index] = updatedPlaylist;
            notifyListeners();
          } else {
            // If playlist not found in the list, refresh the whole list
            await _loadUserPlaylists();
          }
        } else {
          // Fallback to just refreshing all playlists
          await _loadUserPlaylists();
        }
      }
      return success;
    } catch (e) {
      _errorMessage = 'Failed to remove song from playlist: ${e.toString()}';
      return false;
    }
  }
  
  // Update playlists when new song is recognized
  Future<void> onNewSongRecognized() async {
    // Reload auto-generated and recently recognized playlists
    await Future.wait([
      _loadAutoGenerated(),
      _loadRecentlyRecognized(),
    ]);
    notifyListeners();
  }
} 